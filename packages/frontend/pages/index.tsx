import { useEffect, useState, useRef } from 'react';
import Head from 'next/head';
import { Footer } from '../components/Footer';
import io from 'socket.io-client';
import { useRouter } from 'next/router'; // Import useRouter from Next.js
import styles from '../styles/Home.module.css';
import { useAccount, useWriteContract } from 'wagmi';
import abi from '../contract/Fire.json';

const socket = io(); // Connect to the Socket.IO server

const Home = () => {
  const [photoFile, setPhotoFile] = useState<File | null>(null); // Use File instead of string
  const [isPosting, setIsPosting] = useState<boolean>(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const router = useRouter(); // Initialize the router
  const { address } = useAccount();
  const { writeContract } = useWriteContract();   

  // useEffect to connect and disconnect socket
  useEffect(() => {
    // Connect to the Socket.IO server
    socket.on('connect', () => {
      console.log('Connected to Socket.IO server');
    });

    // Disconnect from the Socket.IO server when component unmounts
    return () => {
      socket.disconnect();
      console.log('Disconnected from Socket.IO server');
    };
  }, []);

  const handlePhotoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setPhotoFile(file); // Set the selected file
    }
  };

  const handlePost = async () => {
      // get reward
      const contractAddr: `0x${string}` = process.env.NEXT_PUBLIC_FIRE_ADDRESS as `0x${string}`;
      writeContract({
          address: contractAddr,
          abi,
          functionName: 'givePostReward',
          args: [],
      })
    if (photoFile && address != null) {
      const userAddr = address?.toString()
      setIsPosting(true);
      const formData = new FormData();
      formData.append('file', photoFile); 
      formData.append('user_address', userAddr); 

      try {
        const response = await fetch('http://localhost:8000/api/post', { 
          method: 'POST',
          body: formData,
        });
        if (response.ok) {
          // Post successful, navigate to Posts page
          router.push('/Posts');
        } else {
          console.error('Failed to post photo');
        }
      } catch (error) {
        console.error('Error posting photo:', error);
      } finally {
        setIsPosting(false);
      }
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>FirePost</title>
        <meta content="Generated by Dino&FC" name="description" />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <strong className="italic text-red-300">FIREPOST</strong>
        </h1>

        {!address && 
        <div className={styles.card}>
          <h1>Please Connect the Wallet First! ☝️</h1>
        </div>}

        {address && <div className={styles.card}>
          <input
            type="file"
            ref={fileInputRef}
            name="file"
            accept="image/*"
            style={{ display: 'none' }}
            onChange={handlePhotoUpload}
          />
          <button
            className="file-upload-btn"
            onClick={() => fileInputRef.current?.click()}
          >
            POST HERE
          </button>
        </div> }


        {/* Display uploaded photo */}
        {photoFile && (
          <div className={styles.card}>
            <div className='flex flex-col items-center'>
              <img src={URL.createObjectURL(photoFile)} alt="Uploaded" className="p-4 max-w-xs max-h-xs" />
              <button
                className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded mt-2"
                onClick={() => handlePost()}
                disabled={isPosting}
              >
                {isPosting ? 'Posting...' : 'Post'}
              </button>
            </div>
          </div>
        )}
      </main>
    </div>
  );
};

export default Home;
